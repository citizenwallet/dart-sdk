# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test

      - name: Fetch tags
        run: git fetch --tags

      - name: Parse Tag
        id: parse_tag
        run: |
          LAST_TAG=$(git tag | sort -V | tail -n 1)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG='1.0.0'
          fi
          IFS='.' read -ra VERSION_PARTS <<< "$LAST_TAG"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_TAG="$MAJOR.$MINOR.$((PATCH + 1))"
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEW_TAG="$MAJOR.$MINOR.$PATCH"
          done
          echo ::set-output name=tag::${NEW_TAG}

      - name: Update Pubspec
        run: |
          sed -i "s/version: .*/version: ${{ steps.parse_tag.outputs.tag }}/" pubspec.yaml

      - name: Commit changes
        run: |
          git config --local user.email "bot@citizenwallet.xyz"
          git config --local user.name "CW GitHub Action"
          git add pubspec.yaml
          git commit -m "Update version"
          git push origin main

      - name: Create tag
        run: git tag ${{ steps.parse_tag.outputs.tag }}

      - name: Push Tag
        run: git push origin ${{ steps.parse_tag.outputs.tag }}
